

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon May 13 03:34:10 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4455
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15  0000                     
    16                           ; Version 2.05
    17                           ; Generated 20/12/2018 GMT
    18                           ; 
    19                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F4455 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     
    51                           	psect	smallconst
    52  000800                     __psmallconst:
    53                           	opt callstack 0
    54  000800  00                 	db	0
    55  000801                     _lut:
    56                           	opt callstack 0
    57  000801  0001               	dw	1
    58  000803  0000               	dw	0
    59  000805  0001               	dw	1
    60  000807  0001               	dw	1
    61  000809  0000               	dw	0
    62  00080B  0001               	dw	1
    63  00080D  FFFF               	dw	65535
    64  00080F  0001               	dw	1
    65  000811  FFFF               	dw	65535
    66  000813  0000               	dw	0
    67  000815  FFFF               	dw	65535
    68  000817  FFFF               	dw	65535
    69  000819  0000               	dw	0
    70  00081B  FFFF               	dw	65535
    71  00081D  0001               	dw	1
    72  00081F  FFFF               	dw	65535
    73  000821                     __end_of_lut:
    74                           	opt callstack 0
    75  000821  0002               	dw	2
    76  000823                     __end_of_time:
    77                           	opt callstack 0
    78  0000                     _TRISB	set	3987
    79  0000                     _LATBbits	set	3978
    80                           
    81                           ; #config settings
    82  000823  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	cinit
    85  000968                     __pcinit:
    86                           	opt callstack 0
    87  000968                     start_initialization:
    88                           	opt callstack 0
    89  000968                     __initialization:
    90                           	opt callstack 0
    91                           
    92                           ; Clear objects allocated to COMRAM (2 bytes)
    93  000968  6A0A               	clrf	(__pbssCOMRAM+1)& (0+255),c
    94  00096A  6A09               	clrf	__pbssCOMRAM& (0+255),c
    95  00096C                     end_of_initialization:
    96                           	opt callstack 0
    97  00096C                     __end_of__initialization:
    98                           	opt callstack 0
    99  00096C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   100  00096E  6EF8               	movwf	tblptru,c
   101  000970  0E08               	movlw	high __Lsmallconst
   102  000972  6EF7               	movwf	tblptrh,c
   103  000974  0100               	movlb	0
   104  000976  EF75  F004         	goto	_main	;jump to C main() function
   105                           
   106                           	psect	bssCOMRAM
   107  000009                     __pbssCOMRAM:
   108                           	opt callstack 0
   109  000009                     _state:
   110                           	opt callstack 0
   111  000009                     	ds	2
   112                           
   113                           	psect	cstackCOMRAM
   114  000001                     __pcstackCOMRAM:
   115                           	opt callstack 0
   116  000001                     coilA@dir:
   117                           	opt callstack 0
   118  000001                     coilB@dir:
   119                           	opt callstack 0
   120                           
   121                           ; 2 bytes @ 0x0
   122  000001                     	ds	2
   123  000003                     move@step:
   124                           	opt callstack 0
   125                           
   126                           ; 2 bytes @ 0x2
   127  000003                     	ds	2
   128  000005                     move@dir:
   129                           	opt callstack 0
   130                           
   131                           ; 2 bytes @ 0x4
   132  000005                     	ds	2
   133  000007                     ??_move:
   134                           
   135                           ; 1 bytes @ 0x6
   136  000007                     	ds	2
   137  000009                     
   138                           ; 1 bytes @ 0x8
   139 ;;
   140 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   141 ;;
   142 ;; *************** function _main *****************
   143 ;; Defined at:
   144 ;;		line 151 in file "main.c"
   145 ;; Parameters:    Size  Location     Type
   146 ;;		None
   147 ;; Auto vars:     Size  Location     Type
   148 ;;  i               2    0        int 
   149 ;; Return value:  Size  Location     Type
   150 ;;                  1    wreg      void 
   151 ;; Registers used:
   152 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   153 ;; Tracked objects:
   154 ;;		On entry : 0/0
   155 ;;		On exit  : 0/0
   156 ;;		Unchanged: 0/0
   157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   158 ;;      Params:         0       0       0       0       0       0       0       0       0
   159 ;;      Locals:         0       0       0       0       0       0       0       0       0
   160 ;;      Temps:          0       0       0       0       0       0       0       0       0
   161 ;;      Totals:         0       0       0       0       0       0       0       0       0
   162 ;;Total ram usage:        0 bytes
   163 ;; Hardware stack levels required when called:    2
   164 ;; This function calls:
   165 ;;		_move
   166 ;; This function is called by:
   167 ;;		Startup code after reset
   168 ;; This function uses a non-reentrant model
   169 ;;
   170                           
   171                           	psect	text0
   172  0008EA                     __ptext0:
   173                           	opt callstack 0
   174  0008EA                     _main:
   175                           	opt callstack 29
   176                           
   177                           ;main.c: 155:     TRISB = 0 ;
   178                           
   179                           ;incstack = 0
   180  0008EA  0E00               	movlw	0
   181  0008EC  6E93               	movwf	3987,c	;volatile
   182                           
   183                           ;main.c: 157:     int i;;main.c: 159:     move(400,1);
   184  0008EE  0E01               	movlw	1
   185  0008F0  6E04               	movwf	move@step+1,c
   186  0008F2  0E90               	movlw	144
   187  0008F4  6E03               	movwf	move@step,c
   188  0008F6  0E00               	movlw	0
   189  0008F8  6E06               	movwf	move@dir+1,c
   190  0008FA  0E01               	movlw	1
   191  0008FC  6E05               	movwf	move@dir,c
   192  0008FE  EC12  F004         	call	_move	;wreg free
   193                           
   194                           ;main.c: 160:     move(200,0);
   195  000902  0E00               	movlw	0
   196  000904  6E04               	movwf	move@step+1,c
   197  000906  0EC8               	movlw	200
   198  000908  6E03               	movwf	move@step,c
   199  00090A  0E00               	movlw	0
   200  00090C  6E06               	movwf	move@dir+1,c
   201  00090E  0E00               	movlw	0
   202  000910  6E05               	movwf	move@dir,c
   203  000912  EC12  F004         	call	_move	;wreg free
   204  000916                     l39:
   205  000916  D7FF               	goto	l39
   206  000918                     __end_of_main:
   207                           	opt callstack 0
   208                           
   209 ;; *************** function _move *****************
   210 ;; Defined at:
   211 ;;		line 126 in file "main.c"
   212 ;; Parameters:    Size  Location     Type
   213 ;;  step            2    2[COMRAM] int 
   214 ;;  dir             2    4[COMRAM] int 
   215 ;; Auto vars:     Size  Location     Type
   216 ;;		None
   217 ;; Return value:  Size  Location     Type
   218 ;;                  1    wreg      void 
   219 ;; Registers used:
   220 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   221 ;; Tracked objects:
   222 ;;		On entry : 0/0
   223 ;;		On exit  : 0/0
   224 ;;		Unchanged: 0/0
   225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   226 ;;      Params:         4       0       0       0       0       0       0       0       0
   227 ;;      Locals:         0       0       0       0       0       0       0       0       0
   228 ;;      Temps:          2       0       0       0       0       0       0       0       0
   229 ;;      Totals:         6       0       0       0       0       0       0       0       0
   230 ;;Total ram usage:        6 bytes
   231 ;; Hardware stack levels used:    1
   232 ;; Hardware stack levels required when called:    1
   233 ;; This function calls:
   234 ;;		_coilA
   235 ;;		_coilB
   236 ;; This function is called by:
   237 ;;		_main
   238 ;; This function uses a non-reentrant model
   239 ;;
   240                           
   241                           	psect	text1
   242  000824                     __ptext1:
   243                           	opt callstack 0
   244  000824                     _move:
   245                           	opt callstack 29
   246                           
   247                           ;main.c: 126: void move(int step, int dir);main.c: 127: {;main.c: 128:     while(step>0)
   248                           
   249                           ;incstack = 0
   250  000824  D05A               	goto	l818
   251  000826                     l798:
   252                           
   253                           ;main.c: 129:     {;main.c: 130:         if(state>=8)
   254  000826  BE0A               	btfsc	_state+1,7,c
   255  000828  D00A               	goto	l802
   256  00082A  500A               	movf	_state+1,w,c
   257  00082C  E104               	bnz	u170
   258  00082E  0E08               	movlw	8
   259  000830  5C09               	subwf	_state,w,c
   260  000832  A0D8               	btfss	status,0,c
   261  000834  D004               	goto	l802
   262  000836                     u170:
   263                           
   264                           ;main.c: 131:         {;main.c: 132:             state=0;
   265  000836  0E00               	movlw	0
   266  000838  6E0A               	movwf	_state+1,c
   267  00083A  0E00               	movlw	0
   268  00083C  6E09               	movwf	_state,c
   269  00083E                     l802:
   270                           
   271                           ;main.c: 134:         if(state<0)
   272  00083E  AE0A               	btfss	_state+1,7,c
   273  000840  D004               	goto	l806
   274                           
   275                           ;main.c: 135:         {;main.c: 136:             state=7;
   276  000842  0E00               	movlw	0
   277  000844  6E0A               	movwf	_state+1,c
   278  000846  0E07               	movlw	7
   279  000848  6E09               	movwf	_state,c
   280  00084A                     l806:
   281                           
   282                           ;main.c: 138:         coilA(lut[state][0]);
   283  00084A  C009  F007         	movff	_state,??_move
   284  00084E  C00A  F008         	movff	_state+1,??_move+1
   285  000852  90D8               	bcf	status,0,c
   286  000854  3607               	rlcf	??_move,f,c
   287  000856  3608               	rlcf	??_move+1,f,c
   288  000858  90D8               	bcf	status,0,c
   289  00085A  3607               	rlcf	??_move,f,c
   290  00085C  3608               	rlcf	??_move+1,f,c
   291  00085E  0E01               	movlw	low _lut
   292  000860  2407               	addwf	??_move,w,c
   293  000862  6EF6               	movwf	tblptrl,c
   294  000864  0E08               	movlw	high _lut
   295  000866  2008               	addwfc	??_move+1,w,c
   296  000868  6EF7               	movwf	tblptrh,c
   297  00086A                     	if	0	;There are less than 3 active tblptr bytes
   298  00086A                     	endif
   299  00086A  0009               	tblrd		*+
   300  00086C  CFF5 F001          	movff	tablat,coilA@dir
   301  000870  000A               	tblrd		*-
   302  000872  CFF5 F002          	movff	tablat,coilA@dir+1
   303  000876  ECA0  F004         	call	_coilA	;wreg free
   304                           
   305                           ;main.c: 139:         coilB(lut[state][1]);
   306  00087A  C009  F007         	movff	_state,??_move
   307  00087E  C00A  F008         	movff	_state+1,??_move+1
   308  000882  90D8               	bcf	status,0,c
   309  000884  3607               	rlcf	??_move,f,c
   310  000886  3608               	rlcf	??_move+1,f,c
   311  000888  90D8               	bcf	status,0,c
   312  00088A  3607               	rlcf	??_move,f,c
   313  00088C  3608               	rlcf	??_move+1,f,c
   314  00088E  0E02               	movlw	2
   315  000890  2607               	addwf	??_move,f,c
   316  000892  0E00               	movlw	0
   317  000894  2208               	addwfc	??_move+1,f,c
   318  000896  0E01               	movlw	low _lut
   319  000898  2407               	addwf	??_move,w,c
   320  00089A  6EF6               	movwf	tblptrl,c
   321  00089C  0E08               	movlw	high _lut
   322  00089E  2008               	addwfc	??_move+1,w,c
   323  0008A0  6EF7               	movwf	tblptrh,c
   324  0008A2                     	if	0	;There are less than 3 active tblptr bytes
   325  0008A2                     	endif
   326  0008A2  0009               	tblrd		*+
   327  0008A4  CFF5 F001          	movff	tablat,coilB@dir
   328  0008A8  000A               	tblrd		*-
   329  0008AA  CFF5 F002          	movff	tablat,coilB@dir+1
   330  0008AE  EC8C  F004         	call	_coilB	;wreg free
   331                           
   332                           ;main.c: 140:         _delay((unsigned long)((time)*(20000000/4000.0)));
   333  0008B2  0E0D               	movlw	13
   334  0008B4  6E07               	movwf	??_move& (0+255),c
   335  0008B6  0EFC               	movlw	252
   336  0008B8                     u217:
   337  0008B8  2EE8               	decfsz	wreg,f,c
   338  0008BA  D7FE               	bra	u217
   339  0008BC  2E07               	decfsz	??_move& (0+255),f,c
   340  0008BE  D7FC               	bra	u217
   341                           
   342                           ;main.c: 141:         if(dir==1)
   343  0008C0  0405               	decf	move@dir,w,c
   344  0008C2  1006               	iorwf	move@dir+1,w,c
   345  0008C4  A4D8               	btfss	status,2,c
   346  0008C6  D003               	goto	l816
   347                           
   348                           ;main.c: 142:             state++;
   349  0008C8  4A09               	infsnz	_state,f,c
   350  0008CA  2A0A               	incf	_state+1,f,c
   351  0008CC  D003               	goto	l32
   352  0008CE                     l816:
   353                           
   354                           ;main.c: 144:             state--;
   355  0008CE  0609               	decf	_state,f,c
   356  0008D0  A0D8               	btfss	status,0,c
   357  0008D2  060A               	decf	_state+1,f,c
   358  0008D4                     l32:
   359                           
   360                           ;main.c: 146:         step--;
   361  0008D4  0603               	decf	move@step,f,c
   362  0008D6  A0D8               	btfss	status,0,c
   363  0008D8  0604               	decf	move@step+1,f,c
   364  0008DA                     l818:
   365                           
   366                           ;main.c: 128:     while(step>0)
   367  0008DA  BE04               	btfsc	move@step+1,7,c
   368  0008DC  0012               	return	
   369  0008DE  5004               	movf	move@step+1,w,c
   370  0008E0  E1A2               	bnz	l798
   371  0008E2  0403               	decf	move@step,w,c
   372  0008E4  A0D8               	btfss	status,0,c
   373  0008E6  0012               	return	
   374  0008E8  D79E               	goto	l798
   375  0008EA                     __end_of_move:
   376                           	opt callstack 0
   377                           
   378 ;; *************** function _coilB *****************
   379 ;; Defined at:
   380 ;;		line 104 in file "main.c"
   381 ;; Parameters:    Size  Location     Type
   382 ;;  dir             2    0[COMRAM] int 
   383 ;; Auto vars:     Size  Location     Type
   384 ;;		None
   385 ;; Return value:  Size  Location     Type
   386 ;;                  1    wreg      void 
   387 ;; Registers used:
   388 ;;		wreg, status,2, status,0
   389 ;; Tracked objects:
   390 ;;		On entry : 0/0
   391 ;;		On exit  : 0/0
   392 ;;		Unchanged: 0/0
   393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   394 ;;      Params:         2       0       0       0       0       0       0       0       0
   395 ;;      Locals:         0       0       0       0       0       0       0       0       0
   396 ;;      Temps:          0       0       0       0       0       0       0       0       0
   397 ;;      Totals:         2       0       0       0       0       0       0       0       0
   398 ;;Total ram usage:        2 bytes
   399 ;; Hardware stack levels used:    1
   400 ;; This function calls:
   401 ;;		Nothing
   402 ;; This function is called by:
   403 ;;		_move
   404 ;; This function uses a non-reentrant model
   405 ;;
   406                           
   407                           	psect	text2
   408  000918                     __ptext2:
   409                           	opt callstack 0
   410  000918                     _coilB:
   411                           	opt callstack 29
   412                           
   413                           ;main.c: 104: void coilB(int dir);main.c: 105: {;main.c: 106:     if(dir==-1)
   414                           
   415                           ;incstack = 0
   416  000918  2801               	incf	coilB@dir,w,c
   417  00091A  E105               	bnz	l788
   418  00091C  2802               	incf	coilB@dir+1,w,c
   419  00091E  A4D8               	btfss	status,2,c
   420  000920  D002               	goto	l788
   421                           
   422                           ;main.c: 107:     {;main.c: 108:         LATBbits.LATB2 = 1;
   423  000922  848A               	bsf	3978,2,c	;volatile
   424                           
   425                           ;main.c: 109:         LATBbits.LATB3 = 0;
   426  000924  968A               	bcf	3978,3,c	;volatile
   427  000926                     l788:
   428                           
   429                           ;main.c: 112:     if(dir==0)
   430  000926  5001               	movf	coilB@dir,w,c
   431  000928  1002               	iorwf	coilB@dir+1,w,c
   432  00092A  A4D8               	btfss	status,2,c
   433  00092C  D002               	goto	l792
   434                           
   435                           ;main.c: 113:     {;main.c: 114:         LATBbits.LATB2 = 0;
   436  00092E  948A               	bcf	3978,2,c	;volatile
   437                           
   438                           ;main.c: 115:         LATBbits.LATB3 = 0;
   439  000930  968A               	bcf	3978,3,c	;volatile
   440  000932                     l792:
   441                           
   442                           ;main.c: 118:     if(dir==1)
   443  000932  0401               	decf	coilB@dir,w,c
   444  000934  1002               	iorwf	coilB@dir+1,w,c
   445  000936  A4D8               	btfss	status,2,c
   446  000938  0012               	return	
   447                           
   448                           ;main.c: 119:     {;main.c: 120:         LATBbits.LATB2 = 0;
   449  00093A  948A               	bcf	3978,2,c	;volatile
   450                           
   451                           ;main.c: 121:         LATBbits.LATB3 = 1;
   452  00093C  868A               	bsf	3978,3,c	;volatile
   453  00093E  0012               	return		;funcret
   454  000940                     __end_of_coilB:
   455                           	opt callstack 0
   456                           
   457 ;; *************** function _coilA *****************
   458 ;; Defined at:
   459 ;;		line 82 in file "main.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;  dir             2    0[COMRAM] int 
   462 ;; Auto vars:     Size  Location     Type
   463 ;;		None
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      void 
   466 ;; Registers used:
   467 ;;		wreg, status,2, status,0
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   473 ;;      Params:         2       0       0       0       0       0       0       0       0
   474 ;;      Locals:         0       0       0       0       0       0       0       0       0
   475 ;;      Temps:          0       0       0       0       0       0       0       0       0
   476 ;;      Totals:         2       0       0       0       0       0       0       0       0
   477 ;;Total ram usage:        2 bytes
   478 ;; Hardware stack levels used:    1
   479 ;; This function calls:
   480 ;;		Nothing
   481 ;; This function is called by:
   482 ;;		_move
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           	psect	text3
   487  000940                     __ptext3:
   488                           	opt callstack 0
   489  000940                     _coilA:
   490                           	opt callstack 29
   491                           
   492                           ;main.c: 82: void coilA(int dir);main.c: 83: {;main.c: 84:     if(dir==-1)
   493                           
   494                           ;incstack = 0
   495  000940  2801               	incf	coilA@dir,w,c
   496  000942  E105               	bnz	l776
   497  000944  2802               	incf	coilA@dir+1,w,c
   498  000946  A4D8               	btfss	status,2,c
   499  000948  D002               	goto	l776
   500                           
   501                           ;main.c: 85:     {;main.c: 86:         LATBbits.LATB0 = 1;
   502  00094A  808A               	bsf	3978,0,c	;volatile
   503                           
   504                           ;main.c: 87:         LATBbits.LATB1 = 0;
   505  00094C  928A               	bcf	3978,1,c	;volatile
   506  00094E                     l776:
   507                           
   508                           ;main.c: 90:     if(dir==0)
   509  00094E  5001               	movf	coilA@dir,w,c
   510  000950  1002               	iorwf	coilA@dir+1,w,c
   511  000952  A4D8               	btfss	status,2,c
   512  000954  D002               	goto	l780
   513                           
   514                           ;main.c: 91:     {;main.c: 92:         LATBbits.LATB0 = 0;
   515  000956  908A               	bcf	3978,0,c	;volatile
   516                           
   517                           ;main.c: 93:         LATBbits.LATB1 = 0;
   518  000958  928A               	bcf	3978,1,c	;volatile
   519  00095A                     l780:
   520                           
   521                           ;main.c: 96:     if(dir==1)
   522  00095A  0401               	decf	coilA@dir,w,c
   523  00095C  1002               	iorwf	coilA@dir+1,w,c
   524  00095E  A4D8               	btfss	status,2,c
   525  000960  0012               	return	
   526                           
   527                           ;main.c: 97:     {;main.c: 98:         LATBbits.LATB0 = 0;
   528  000962  908A               	bcf	3978,0,c	;volatile
   529                           
   530                           ;main.c: 99:         LATBbits.LATB1 = 1;
   531  000964  828A               	bsf	3978,1,c	;volatile
   532  000966  0012               	return		;funcret
   533  000968                     __end_of_coilA:
   534                           	opt callstack 0
   535                           
   536                           	psect	rparam
   537  0000                     tosu	equ	0xFFF
   538                           tosh	equ	0xFFE
   539                           tosl	equ	0xFFD
   540                           stkptr	equ	0xFFC
   541                           pclatu	equ	0xFFB
   542                           pclath	equ	0xFFA
   543                           pcl	equ	0xFF9
   544                           tblptru	equ	0xFF8
   545                           tblptrh	equ	0xFF7
   546                           tblptrl	equ	0xFF6
   547                           tablat	equ	0xFF5
   548                           prodh	equ	0xFF4
   549                           prodl	equ	0xFF3
   550                           indf0	equ	0xFEF
   551                           postinc0	equ	0xFEE
   552                           postdec0	equ	0xFED
   553                           preinc0	equ	0xFEC
   554                           plusw0	equ	0xFEB
   555                           fsr0h	equ	0xFEA
   556                           fsr0l	equ	0xFE9
   557                           wreg	equ	0xFE8
   558                           indf1	equ	0xFE7
   559                           postinc1	equ	0xFE6
   560                           postdec1	equ	0xFE5
   561                           preinc1	equ	0xFE4
   562                           plusw1	equ	0xFE3
   563                           fsr1h	equ	0xFE2
   564                           fsr1l	equ	0xFE1
   565                           bsr	equ	0xFE0
   566                           indf2	equ	0xFDF
   567                           postinc2	equ	0xFDE
   568                           postdec2	equ	0xFDD
   569                           preinc2	equ	0xFDC
   570                           plusw2	equ	0xFDB
   571                           fsr2h	equ	0xFDA
   572                           fsr2l	equ	0xFD9
   573                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    34
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      8      10
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_move
    _move->_coilA
    _move->_coilB

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     633
                               _move
 ---------------------------------------------------------------------------------
 (1) _move                                                 6     2      4     633
                                              2 COMRAM     6     2      4
                              _coilA
                              _coilB
 ---------------------------------------------------------------------------------
 (2) _coilB                                                2     0      2     142
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _coilA                                                2     0      2     142
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _move
     _coilA
     _coilB

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      8       A       1       10.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       A      20        0.0%
DATA                 0      0       A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon May 13 03:34:10 2019

                     l32 08D4                       l39 0916              __CFG_BOR$ON 000000  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000              __CFG_LVP$ON 000000              __CFG_WDT$ON 000000  
                    l802 083E                      l806 084A                      l816 08CE  
                    l818 08DA                      l780 095A                      l776 094E  
                    l792 0932                      l788 0926                      l798 0826  
           __CFG_CPB$OFF 000000                      u217 08B8                      u170 0836  
           __CFG_CPD$OFF 000000                      _lut 0801                      wreg 000FE8  
           __CFG_FOSC$HS 000000                     _main 08EA                     _move 0824  
                   _time 0821                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000            __CFG_PLLDIV$1 000000  
         __CFG_CCP2MX$ON 000000                    ?_main 0001                    ?_move 0003  
          __CFG_USBDIV$1 000000                    _TRISB 000F93            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _coilA 0940  
                  _coilB 0918                    _state 0009                    tablat 000FF5  
                  status 000FD8           __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000  
        __initialization 0968             __end_of_main 0918             __end_of_move 08EA  
           __end_of_time 0823                   ??_main 0009                   ??_move 0007  
          __activetblptr 000001                   ?_coilA 0001                   ?_coilB 0001  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 096C            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_coilA 0968            __end_of_coilB 0940  
                ??_coilA 0003                  ??_coilB 0003          __CFG_VREGEN$OFF 000000  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0800  
                __pcinit 0968                  __ramtop 0800                  __ptext0 08EA  
                __ptext1 0824                  __ptext2 0918                  __ptext3 0940  
   end_of_initialization 096C                  move@dir 0005      start_initialization 0968  
            __end_of_lut 0821         __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 0009  
            __smallconst 0800           __size_of_coilA 0028           __size_of_coilB 0028  
               _LATBbits 000F8A         __CFG_WDTPS$32768 000000                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0800            __size_of_main 002E  
          __size_of_move 00C6                 coilA@dir 0001                 coilB@dir 0001  
  __CFG_CPUDIV$OSC1_PLL2 000000                 move@step 0003  
